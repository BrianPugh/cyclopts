[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "cyclopts"
dynamic = ["version"]
description = "Intuitive, easy CLIs based on type hints."
readme = "README.md"
license = "Apache-2.0"
authors = [{ name = "Brian Pugh" }]
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]
dependencies = [
    "attrs>=23.1.0",
    "rich>=13.6.0",
    "docstring-parser>=0.15,<4.0",
    "rich-rst>=1.3.1,<2.0.0",
    "typing-extensions>=4.8.0; python_version<'3.11'",
    "tomli>=2.0.0; python_version<'3.11'",
]

[project.optional-dependencies]
toml = ["tomli>=2.0.0; python_version<'3.11'"]
trio = ["trio>=0.10.0"]
yaml = ["pyyaml>=6.0.1"]
docs = [
    "sphinx>=7.4.7,<8.2.0",
    "sphinx_rtd_theme>=3.0.0,<4.0.0",
    "gitpython>=3.1.31",
    "sphinx-copybutton>=0.5,<1.0",
    "myst-parser[linkify]>=3.0.1,<5.0.0",
    "sphinx-autodoc-typehints>=1.25.2,<4.0.0",
    "sphinx-rtd-dark-mode>=1.3.0,<2.0.0",
]
mkdocs = [
    "mkdocs>=1.4.0",
    "markdown>=3.3",
]
dev = [
    "coverage[toml]>=5.1",
    "pre_commit>=2.16.0",
    "pytest>=8.2.0",
    "pytest-cov>=3.0.0",
    "pytest-mock>=3.7.0",
    "pydantic>=2.11.2,<3.0.0",
    "toml>=0.10.2,<1.0.0",
    "trio>=0.10.0",
    "pyyaml>=6.0.1",
    "mkdocs>=1.4.0",
]
debug = ["ipdb>=0.13.9", "line_profiler>=3.5.1"]

[project.scripts]
cyclopts = "cyclopts.cli:app"

[project.entry-points."mkdocs.plugins"]
cyclopts = "cyclopts.mkdocs_ext:CycloptsPlugin"

[project.urls]
Homepage = "https://github.com/BrianPugh/cyclopts"
Repository = "https://github.com/BrianPugh/cyclopts"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "cyclopts/_version.py"

[tool.hatch.build.targets.sdist]
include = ["/cyclopts"]

[tool.hatch.build.targets.wheel]
packages = ["cyclopts"]
artifacts = ["cyclopts/*.so", "cyclopts/*.pyd"]

[tool.coverage.run]
branch = true
omit = ["tests/*"]
source = ["cyclopts"]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug:",
    "if debug:",
    "if DEBUG:",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    "raise TypeError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",

    "from typing import Annotated",
    "except ImportError:",

    # Overloads can't have coverage:
    "@overload",
]

omit = ["cyclopts/protocols.py"]

[tool.pyright]
venvPath = "."
venv = ".venv"
ignore = ["docs/", "tests/py312/"]
reportUnsupportedDunderAll = "none"

[tool.ruff]
target-version = 'py310'
line-length = 120
exclude = [
    "migrations",
    "__pycache__",
    "manage.py",
    "settings.py",
    "env",
    ".env",
    "venv",
    ".venv",
    "tests/py312/",
]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "D",   # pydocstyle
    "E",   # Error
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "PGH", # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "Q",   # flake8-quotes
    "TRY", # tryceratops
    "UP",  # pyupgrade
    "W",   # Warning
    "YTT", # flake8-2020
]

ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D401",
    "E402",
    "E501",
    "PGH003", # Use specific rule codes when ignoring type issues
    "TRY003", # Avoid specifying messages outside exception class; overly strict, especially for ValueError
    "TRY300", # Consider moving this statement to an `else` block
]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["chr", "typer.Argument", "typer.Option"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "B011",   # Do not `assert False`
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D205",
    "D400",
    "D404",
    "N806",   # Variable in function should be lowercase
    "S102",   # use of "exec"
    "S106",   # possible hardcoded password.
    "PGH001", # use of "eval"
    "UP007",  # Use `X | Y` for type annotations; many tests specifically test Union/Optional
    "UP045",  # Use `X | None` for type annotations
]
"docs/*.py" = [
    "F811", # redefinition
]
"cyclopts/config/*.py" = [
    "PTH123", # `open()` should be replaced by `Path.open()`. Pyright doesn't understand that it must be a Path.
]

[tool.ruff.lint.pep8-naming]
staticmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.codespell]
skip = 'uv.lock,'

[tool.creosote]
venvs = [".venv"]
paths = ["cyclopts"]
deps-file = "pyproject.toml"
sections = ["project.dependencies"]
exclude-deps = [
    "typing-extensions",
    "docstring-parser",  # Not detected due to deferred import.
    "rich-rst",          # Not detected due to deferred import.
    "rich",              # Not detected due to deferred import.
    "tomli",             # Not detected due to optional feature.
    "trio",              # Not detected due to optional feature.
]
