r"""Bash completion script generator.

This module generates static bash completion scripts for Cyclopts applications.
The completion generator follows a similar pattern to zsh.py:

1. **Extract** completion data using shared infrastructure from _base.py
2. **Transform** the data into bash completion primitives:
   - Commands → compgen -W "command list"
   - Parameters → COMPREPLY array
   - Literal/Enum choices → compgen -W "choice list"
   - Path types → compgen -f
3. **Generate** a static bash completion script using complete -F

Key differences from zsh:
- Uses COMPREPLY array instead of _arguments
- Uses compgen instead of _describe/_files
- 0-indexed word arrays instead of 1-indexed (COMP_WORDS[0] is the command)
- Different escaping rules

Bash-Specific Design Decisions
-------------------------------

**Escaping Strategy:**
Bash completion requires careful escaping to prevent shell injection. This module uses:
- Single quotes with '\'' for embedded single quotes (e.g., "don't" → "don'\''t")
- Backslash escaping for: $ ` \\ " and space
- No need for printf %q since we control the output format
- Special characters in choices are escaped before inclusion in compgen -W lists

**Description Handling:**
Unlike zsh's _describe which shows inline descriptions, bash completion does NOT natively
support showing help text during completion. Therefore:
- Descriptions are OMITTED from completion output (not shown to users)
- Help text is preserved in comments for documentation purposes only
- Future enhancement: Could use compopt -o nosort with special formatting, but this is
  not widely supported across bash versions (requires bash 4.4+)

**COMPREPLY Array:**
The completion function populates the COMPREPLY array with suggestions:
- COMPREPLY=( $(compgen -W "option1 option2" -- "$current_word") )
- Bash handles filtering based on the current partial word automatically
- Each element in COMPREPLY is a completion candidate

**compgen Flags:**
- compgen -W "word list" → Generate completions from word list
- compgen -f → Generate file completions
- compgen -d → Generate directory completions
- compgen -A file → Alternative file completion syntax

**Compatibility:**
- Targets bash 3.2+ (macOS default) through bash 5.x
- Fully portable between Linux, macOS, and other Unix systems
- No external dependencies (bash-completion package NOT required)
- Uses only standard bash completion variables: COMP_WORDS, COMP_CWORD, COMPREPLY
- All constructs tested on bash 3.2+ (arrays, regex, C-style loops, compgen)
"""

import re
from typing import TYPE_CHECKING

from cyclopts.completion._base import (
    CompletionAction,
    CompletionData,
    clean_choice_text,
    extract_completion_data,
    get_completion_action,
)

if TYPE_CHECKING:
    from cyclopts import App


def generate_completion_script(app: "App", prog_name: str) -> str:
    """Generate bash completion script.

    Generates static completion script with no runtime Python dependency.
    Supports:
    - Commands and subcommands
    - Options (flags)
    - Literal/Enum value completion
    - Negative flags (--verbose/--no-verbose)
    - Path/file completion for Path types

    Parameters
    ----------
    app : App
        The Cyclopts application to generate completion for.
    prog_name : str
        Program name for completion function naming.
        Must be a valid shell identifier (alphanumeric and underscore).

    Returns
    -------
    str
        Complete bash completion script ready to source.

    Raises
    ------
    ValueError
        If prog_name contains invalid characters.
    """
    if not prog_name or not re.match(r"^[a-zA-Z0-9_-]+$", prog_name):
        raise ValueError(f"Invalid prog_name: {prog_name!r}. Must be alphanumeric with hyphens/underscores.")

    func_name = prog_name.replace("-", "_")
    completion_data = extract_completion_data(app)

    lines = [
        f"# Bash completion for {prog_name}",
        "# Generated by Cyclopts",
        "",
        f"_{func_name}() {{",
        "  local cur prev",
        "",
    ]

    lines.extend(_generate_completion_function_body(completion_data, prog_name, app))

    lines.extend(["}"])
    lines.append("")
    lines.append(f"complete -F _{func_name} {prog_name}")
    lines.append("")

    return "\n".join(lines)


def _escape_bash_choice(choice: str) -> str:
    r"""Escape special characters in a completion choice value for bash.

    Parameters
    ----------
    choice : str
        Raw choice value (should already be cleaned via clean_choice_text).

    Returns
    -------
    str
        Escaped choice value safe for bash completion compgen -W lists.
    """
    return choice.replace("'", "'\\''")


def _escape_bash_description(text: str) -> str:
    r"""Escape special characters in description text for bash comments.

    Parameters
    ----------
    text : str
        Cleaned description text (should already be cleaned via clean_description_text).

    Returns
    -------
    str
        Text safe for bash script comments.
    """
    text = text.replace("\n", " ")
    text = text.replace("\r", " ")
    return text


def _map_completion_action_to_bash(action: CompletionAction) -> str:
    """Map shell-agnostic completion action to bash-specific compgen flags.

    Parameters
    ----------
    action : CompletionAction
        Shell-agnostic completion action.

    Returns
    -------
    str
        Bash compgen flags (e.g., "-f", "-d", or "").
    """
    if action == CompletionAction.FILES:
        return "-f"
    elif action == CompletionAction.DIRECTORIES:
        return "-d"
    return ""


def _generate_completion_function_body(
    completion_data: dict[tuple[str, ...], CompletionData],
    prog_name: str,
    app: "App",
) -> list[str]:
    """Generate the body of the bash completion function.

    Parameters
    ----------
    completion_data : dict
        All extracted completion data.
    prog_name : str
        Program name.
    app : App
        Application instance.

    Returns
    -------
    list[str]
        Lines of bash code for the completion function body.
    """
    lines = []
    lines.append('  cur="${COMP_WORDS[COMP_CWORD]}"')
    lines.append('  prev="${COMP_WORDS[COMP_CWORD-1]}"')
    lines.append("")

    lines.extend(_generate_command_path_detection(completion_data))
    lines.append("")

    lines.extend(_generate_completion_logic(completion_data, prog_name, app))

    return lines


def _generate_command_path_detection(completion_data: dict[tuple[str, ...], CompletionData]) -> list[str]:
    """Generate bash code to detect the current command path.

    Parameters
    ----------
    completion_data : dict
        All extracted completion data.

    Returns
    -------
    list[str]
        Lines of bash code for command path detection.
    """
    options_with_values = set()
    for data in completion_data.values():
        for argument in data.arguments:
            if not argument.is_flag() and argument.parameter.name:
                for name in argument.parameter.name:
                    if name.startswith("-"):
                        options_with_values.add(name)

    lines = []
    lines.append("  # Build list of options that take values (to skip their arguments)")
    if options_with_values:
        escaped_opts = [_escape_bash_choice(opt) for opt in sorted(options_with_values)]
        opts_str = " ".join(escaped_opts)
        lines.append(f"  local options_with_values='{opts_str}'")
    else:
        lines.append("  local options_with_values=''")
    lines.append("")
    lines.append("  # Detect command path by collecting non-option words")
    lines.append("  local -a cmd_path=()")
    lines.append("  local i skip_next=0")
    lines.append("  for ((i=1; i<COMP_CWORD; i++)); do")
    lines.append('    local word="${COMP_WORDS[i]}"')
    lines.append("    if [[ $skip_next -eq 1 ]]; then")
    lines.append("      skip_next=0")
    lines.append("      continue")
    lines.append("    fi")
    lines.append("    if [[ $word =~ ^- ]]; then")
    lines.append("      # Check if this option takes a value")
    lines.append('      if [[ " $options_with_values " =~ " $word " ]]; then')
    lines.append("        skip_next=1")
    lines.append("      fi")
    lines.append("    else")
    lines.append("      # Non-option word is a command")
    lines.append('      cmd_path+=("$word")')
    lines.append("    fi")
    lines.append("  done")
    return lines


def _generate_completion_logic(
    completion_data: dict[tuple[str, ...], CompletionData],
    prog_name: str,
    app: "App",
) -> list[str]:
    """Generate the main completion logic using case statements.

    Parameters
    ----------
    completion_data : dict
        All extracted completion data.
    prog_name : str
        Program name.
    app : App
        Application instance.

    Returns
    -------
    list[str]
        Lines of bash code for completion logic.
    """
    lines = []

    help_flags = tuple(app.help_flags) if app.help_flags else ()
    version_flags = tuple(app.version_flags) if app.version_flags else ()

    lines.append("  # Determine command level and generate completions")
    lines.append('  case "${#cmd_path[@]}" in')

    max_depth = max(len(path) for path in completion_data.keys())
    for depth in range(max_depth + 1):
        relevant_paths = [path for path in completion_data.keys() if len(path) == depth]
        if not relevant_paths:
            continue

        lines.append(f"    {depth})")

        if depth == 0:
            lines.extend(_generate_completions_for_path(completion_data, (), "      ", help_flags, version_flags))
        else:
            lines.append('      case "${cmd_path[@]}" in')
            for path in sorted(relevant_paths):
                path_str = " ".join(path)
                lines.append(f'        "{path_str}")')
                lines.extend(
                    _generate_completions_for_path(completion_data, path, "          ", help_flags, version_flags)
                )
                lines.append("          ;;")
            lines.append("        *)")
            lines.append("          ;;")
            lines.append("      esac")

        lines.append("      ;;")

    lines.append("    *)")
    lines.append("      ;;")
    lines.append("  esac")

    return lines


def _generate_completions_for_path(
    completion_data: dict[tuple[str, ...], CompletionData],
    command_path: tuple[str, ...],
    indent: str,
    help_flags: tuple[str, ...],
    version_flags: tuple[str, ...],
) -> list[str]:
    """Generate completions for a specific command path.

    Parameters
    ----------
    completion_data : dict
        All extracted completion data.
    command_path : tuple[str, ...]
        Current command path.
    indent : str
        Indentation string.
    help_flags : tuple[str, ...]
        Help flag names.
    version_flags : tuple[str, ...]
        Version flag names.

    Returns
    -------
    list[str]
        Lines of bash code for completions at this command path.
    """
    if command_path not in completion_data:
        return [f"{indent}COMPREPLY=()"]

    data = completion_data[command_path]
    lines = []

    options = []
    keyword_args = [arg for arg in data.arguments if not arg.is_positional_only() and arg.show]

    for argument in keyword_args:
        for name in argument.parameter.name or []:
            if name.startswith("-"):
                options.append(name)

        for name in argument.negatives:
            if name.startswith("-"):
                options.append(name)

    flag_commands = []
    for cmd_app in data.commands:
        for name in cmd_app.name:
            if name.startswith("-"):
                flag_commands.append(name)

    for flag in help_flags:
        if flag.startswith("-") and flag not in options and flag not in flag_commands:
            options.append(flag)

    for flag in version_flags:
        if flag.startswith("-") and flag not in options and flag not in flag_commands:
            options.append(flag)

    options.extend(flag_commands)

    commands = []
    for cmd_app in data.commands:
        for cmd_name in cmd_app.name:
            if not cmd_name.startswith("-"):
                commands.append(cmd_name)

    lines.append(f"{indent}if [[ ${{cur}} == -* ]]; then")

    if options:
        escaped_options = [_escape_bash_choice(opt) for opt in options]
        options_str = " ".join(escaped_options)
        lines.append(f"{indent}  COMPREPLY=( $(compgen -W '{options_str}' -- \"${{cur}}\") )")
    else:
        lines.append(f"{indent}  COMPREPLY=()")

    lines.append(f"{indent}else")

    needs_value_completion = _check_if_prev_needs_value(data.arguments)

    if needs_value_completion:
        value_completion_lines = _generate_value_completion_for_prev(data.arguments, commands, f"{indent}  ")
        lines.extend(value_completion_lines)
    elif commands:
        escaped_commands = [_escape_bash_choice(cmd) for cmd in commands]
        commands_str = " ".join(escaped_commands)
        lines.append(f"{indent}  COMPREPLY=( $(compgen -W '{commands_str}' -- \"${{cur}}\") )")
    else:
        lines.append(f"{indent}  COMPREPLY=()")

    lines.append(f"{indent}fi")

    return lines


def _check_if_prev_needs_value(arguments) -> bool:
    """Check if any options take values, requiring prev-word completion logic.

    Parameters
    ----------
    arguments : ArgumentCollection
        Arguments to check.

    Returns
    -------
    bool
        True if any option (starts with -) takes a value (is not a flag).
    """
    for argument in arguments:
        if not argument.is_flag():
            for name in argument.parameter.name or []:
                if name.startswith("-"):
                    return True
    return False


def _generate_value_completion_for_prev(arguments, commands: list[str], indent: str) -> list[str]:
    """Generate value completion based on previous word.

    Parameters
    ----------
    arguments : ArgumentCollection
        Arguments with potential values.
    commands : list[str]
        Available commands at this level.
    indent : str
        Indentation string.

    Returns
    -------
    list[str]
        Lines of bash code for value completion.
    """
    lines = []
    lines.append(f'{indent}case "${{prev}}" in')

    has_cases = False
    for argument in arguments:
        if argument.is_flag():
            continue

        names = [name for name in (argument.parameter.name or []) if name.startswith("-")]
        if not names:
            continue

        has_cases = True
        choices = argument.get_choices()
        action = get_completion_action(argument.hint)

        for name in names:
            lines.append(f"{indent}  {name})")

            if choices:
                escaped_choices = [_escape_bash_choice(clean_choice_text(c)) for c in choices]
                choices_str = " ".join(escaped_choices)
                lines.append(f"{indent}    COMPREPLY=( $(compgen -W '{choices_str}' -- \"${{cur}}\") )")
            else:
                compgen_flag = _map_completion_action_to_bash(action)
                if compgen_flag:
                    lines.append(f'{indent}    COMPREPLY=( $(compgen {compgen_flag} -- "${{cur}}") )')
                else:
                    lines.append(f"{indent}    COMPREPLY=()")

            lines.append(f"{indent}    ;;")

    if has_cases:
        lines.append(f"{indent}  *)")
        if commands:
            escaped_commands = [_escape_bash_choice(cmd) for cmd in commands]
            commands_str = " ".join(escaped_commands)
            lines.append(f"{indent}    COMPREPLY=( $(compgen -W '{commands_str}' -- \"${{cur}}\") )")
        else:
            lines.append(f"{indent}    COMPREPLY=()")
        lines.append(f"{indent}    ;;")
        lines.append(f"{indent}esac")
    else:
        lines = []
        if commands:
            escaped_commands = [_escape_bash_choice(cmd) for cmd in commands]
            commands_str = " ".join(escaped_commands)
            lines.append(f"{indent}COMPREPLY=( $(compgen -W '{commands_str}' -- \"${{cur}}\") )")
        else:
            lines.append(f"{indent}COMPREPLY=()")

    return lines
